Entrée:
	Instance = {
		int i_Nombre_Jour, i_Nombre_Shift, i_Nombre_Personne
		vector<Shift> v_Shift
		vector<Personne> v_Personne
		vector<...> poids
	}
Préconditions: { attributs définis }
Sortie:
	Solution = {
		vector<vector<int>> v_v_IdShift_Par_Personne_et_Jour
		int i_valeur_fonction_objectif
	}
Postconditions:
	{ toutes les contraintes sont respectées par la solution }


Exemple de solution : {Lundi, Mardi, ...}
						 |
				{Pierre, Marie, ....}
				    |	   |
				    1	   3
				 Cpt = 1


Algorithme:
S <- [1..i_Nombre_Jour][1..i_Nombre_Personne] : Tableau d'Entier entre -1 et i_Nombre_Shift	// Déclaration de la solution

v_Nbre_Shift_Consecutif <- [1..i_Nombre_Personne]
v_Nbre_Jour_OFF_Consecutif <- [1..i_Nombre_Personne]
v_Nbre_WE_Travaille <- [1..i_Nombre_Personne]
v_v_Nbre_Chaque_Shift_Pers <- [1..i_Nombre_Personne][1..i_Nombre_Shift]

Pour personne allant de 1 à i_Nombre_Personne :	// Initialisation du jour 1
	v_Nbre_WE_Travaille[personne] <- 0
	shift <- -1
	Si is_Available_Personne_Jour(personne, 1):

		meilleur_candidat <- -1
		score <- MAX_INT
		Pour candidat allant de 1 à i_Nombre_Shift :
			Si get_Personne_Shift_Nbre_Max(personne, candidat) > 0 : // La personne peut travailler sur ce shift
				score_candidat <- evaluer(candidat) // évalue par rapport à v_v_Nbre_Personne_Requis_Jour_Shift, v_v_v_Poids_Affectation_Pers_Jour_Shift et v_v_v_Poids_Refus_Pers_Jour_Shift
				Si (score_candidat < score) :
					meilleur_candidat <- candidat
					score <- score_candidat
				FinSi
			FinSi
		FinPour
		shift <- meilleur_candidat
		S[1][personne] <- shift

		Pour tout_shift allant de 1 à i_Nombre_Shift :
			v_v_Nbre_Chaque_Shift_Pers[personne][tout_shift] <- 0
		FinPour
		Si (shift != -1 ):
			v_Nbre_Shift_Consecutif[personne] <- 1 //Initialisation du compteur des shifts consecutifs et des jours OFF consécutifs
			v_Nbre_Jour_OFF_Consecutif[personne] <- 0
			v_v_Nbre_Chaque_Shift_Pers[personne][shift] <- 1
		Sinon
			v_Nbre_Shift_Consecutif[personne] <- 0
			v_Nbre_Jour_OFF_Consecutif[personne] <-1
		FinSi

	FinSi
FinPour


Pour jour allant de 2 à i_Nombre_Jour : // On parcourt les jours à partir du 2e
	Pour personne allant de 1 à i_Nombre_Personne : // On parcourt toutes les personnes du jour
		shift <- -1 // Initialisation du shift pour une personne, pour un jour

		Si  ( ( v_Nbre_WE_Travaille[personne] < get_Personne_Nbre_WE_Max(personne) )^( jour % 7 >= 5 ) ) // Si on est le WK et il reste des WK à travailler
			 v
			( jour % 7 < 5 ) : // Ou si on est en semaine

			Si is_Available_Personne_Jour(personne, jour) :
		
				Si V_Nbre_Shift_Consecutif[personne] < get_Personne_Nbre_Shift_Consecutif_Max(personne) :
			
					Si v_Nbre_Jour_OFF_Consecutif[personne] == 0 
					   OU  v_Nbre_Jour_OFF_Consecutif[personne] >= get_Personne_Nbre_Jour_OFF_Consecutif_Min(personne) :
				   
					   //v_Nbre_Jour_OFF_Consecutif[personne] == 0 :situation dans laquelle la personne travaille depuis au moins le jour d'avant
					   // 0 < v_Nbre_Jour_OFF_Consecutif[personne] < get_Personne_Nbre_Jour_OFF_Consecutif_Min(personne)  : situation dans laquelle la 					personne accumule ses repos consécutifs
					   // v_Nbre_Jour_OFF_Consecutif[personne] >= get_Personne_Nbre_Jour_OFF_Consecutif_Min(personne) : situation dans laquelle la 				     	     personne peut reprendre son travail
				
				
				
						// Choix d'un shift
						is_chosen_shift <- Faux
						Pour candidat allant de 1 à i_Nombre_Shift : //les id shift correspondent à candidat
							Si is_possible_Shift_Succede(S[jour-1][personne], candidat) :
								shift <- candidat
								is_chosen_shift <- Vrai
							FinSi
							Si is_chosen_shift :
								Sortir
							FinSi
						
						FinPour
					
					FinSi
				
				FinSi
			
			FinSi

		FinSi
		

		S[jour][personne] <- shift // Affectation du shift à une personne, pour un jour
		Si (shift != -1) :	// Si on travaille ce jour là
			v_Nbre_Shift_Consecutif[personne] += 1
			v_Nbre_Jour_OFF_Consecutif[personne] <- 0
			Si ( jour % 7 == 6 ) :	// Que ce jour là est dimanche (équivalent à : on a travaillé que le dimanche ou tout le WK)
				v_Nbre_WE_Travaille[personne] += 1
			FinSi
		Sinon :
			v_Nbre_Shift_Consecutif[personne] <- 0
			v_Nbre_Jour_OFF_Consecutif[personne] += 1
			Si ( ( jour % 7 == 6 )^( (S[jour-1][personne] != -1) ) : // Que ce jour là est dimanche (on a travaillé que le samedi)
				v_Nbre_WE_Travaille[personne] += 1
			FinSi
		FinSi
	FinPour
FinPour

Retourner S
